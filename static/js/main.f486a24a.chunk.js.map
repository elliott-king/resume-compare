{"version":3,"sources":["images/res-comp_logo_white.png","components/resume-input.jsx","components/job-input.jsx","components/skill-table.jsx","compare/compare.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ResumeInput","props","resume","changeResume","value","onChange","e","target","placeholder","JobInput","job","changeJob","SkillRow","skill","width","align","SkillTable","skills","border","cellPadding","cellSpacing","className","sort","a","b","map","key","skill_count_in_text","text","rx","RegExp","replace","match","filter","x","charAt","length","compare","job_skills","forEach","count","skills_in_job","resume_skills","Object","keys","skills_in_resume","push","App","useState","skillSet","changeSkillSet","alt","id","src","Logo","onSubmit","event","preventDefault","onKeyDown","keyCode","metaKey","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ms5mBAAAA,EAAOC,QAAU,IAA0B,iD,gKCS5BC,G,MAPK,SAACC,GAAW,IACvBC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,aACf,OACE,8BAAUC,MAAOF,EAAQG,SAAU,SAACC,GAAD,OAAOH,EAAaG,EAAEC,OAAOH,QAAQI,YAAY,wBCIzEC,EAPE,SAACR,GAAW,IACpBS,EAAkBT,EAAlBS,IAAKC,EAAaV,EAAbU,UACZ,OACE,8BAAUP,MAAOM,EAAKL,SAAU,SAACC,GAAD,OAAOK,EAAUL,EAAEC,OAAOH,QAAQI,YAAY,2BCmB5EI,EAAW,SAACX,GAChB,IAAMY,EAAQZ,EAAMY,MACpB,OACE,4BACE,wBAAIC,MAAM,MAAMC,MAAM,QAAQF,EAAMA,OACpC,wBAAIC,MAAM,MAAMC,MAAM,SAASF,EAAMX,OAASW,EAAMX,OAAS,gBAC7D,wBAAIY,MAAM,MAAMC,MAAM,SAASF,EAAMH,OAK5BM,EAjCI,SAACf,GAClB,IAAMgB,EAAShB,EAAMgB,OACrB,OACE,2BAAOH,MAAM,OAAOI,OAAO,IAAIC,YAAY,IAAIC,YAAY,KACzD,2BAAOC,UAAU,cACf,4BACE,wBAAIP,MAAM,MAAMC,MAAM,QAAtB,SACA,wBAAID,MAAM,MAAMC,MAAM,SAAtB,UACA,wBAAID,MAAM,MAAMC,MAAM,SAAtB,SAGJ,+BACGE,EAAOK,MAAK,SAACC,EAAGC,GACf,OAAGA,EAAEd,IAAMa,EAAEb,MAAQ,EAAUc,EAAEd,IAAMa,EAAEb,IAC7Bc,EAAEtB,OAASqB,EAAErB,UACtBuB,KAAI,SAAAZ,GAAK,OAAI,kBAAC,EAAD,CAAUa,IAAKb,EAAMA,MAAOA,MAAOA,U,OCTvDc,EAAsB,SAACd,EAAOe,GAOlC,IAAMC,EAAKC,OAAO,OAAqBjB,EAV9BkB,QAAQ,wBAAyB,QAUM,OAAO,MAKvD,OAFiBH,EAAKI,MAAMH,IAAO,IACPI,QAAO,SAAAC,GAAC,OAAIA,EAAEC,OAAO,KAAOtB,EAAMsB,OAAO,MAClDC,QAqBRC,EAAU,SAACnC,EAAQQ,GAC9B,IAAM4B,EAnBc,SAAC5B,GACrB,IAAM4B,EAAa,GAKnB,OAJArB,EAAOsB,SAAQ,SAAA1B,GACb,IAAM2B,EAAQb,EAAoBd,EAAOH,GACrC8B,IAAOF,EAAWzB,GAAS2B,MAE1BF,EAaYG,CAAc/B,GAC3BgC,EAXiB,SAACxC,EAAQoC,GAChC,IAAMI,EAAgB,GAKtB,OAJAC,OAAOC,KAAKN,GAAYC,SAAQ,SAAA1B,GAC9B,IAAM2B,EAAQb,EAAoBd,EAAOX,GACzCwC,EAAc7B,GAAS2B,KAElBE,EAKeG,CAAiB3C,EAAQoC,GACzCD,EAAU,GAShB,OAPAM,OAAOC,KAAKN,GAAYC,SAAQ,SAAA1B,GAC9BwB,EAAQS,KAAK,CACX,MAASjC,EACT,IAAOyB,EAAWzB,GAClB,OAAU6B,EAAc7B,QAGrBwB,G,gBCCMU,MA9Cf,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACN9C,EADM,KACEC,EADF,OAEY6C,mBAAS,IAFrB,mBAENtC,EAFM,KAEDC,EAFC,OAGsBqC,mBAAS,IAH/B,mBAGNC,EAHM,KAGIC,EAHJ,KAkBb,OACE,yBAAK7B,UAAU,OACb,yBAAK8B,IAAI,OAAOC,GAAG,OAAOC,IAAKC,MAC/B,yBAAKjC,UAAU,YACb,0BAAMkC,SAjBS,SAACC,GACpBA,EAAMC,iBACN,IAAMR,EAAWZ,EAAQnC,EAAQQ,GACjCwC,EAAeD,IAcmBS,UAXd,SAACF,GACrB,GAAsB,KAAlBA,EAAMG,SAAkBH,EAAMI,QAAS,CACzC,IAAMX,EAAWZ,EAAQnC,EAAQQ,GACjCwC,EAAeD,MASX,yBAAK5B,UAAU,OACb,4BAAQ+B,GAAG,UAAX,gBACA,yBAAK/B,UAAU,yBACb,0BAAMA,UAAWnB,GAAUQ,EAAM,eAAiB,eAAlD,kBACiB,6CADjB,OACuD,gDAI3D,yBAAKW,UAAU,QACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAalB,aAAcA,EAAcD,OAAQA,IACjD,kBAAC,EAAD,CAAUS,UAAWA,EAAWD,IAAKA,KAEvC,yBAAKW,UAAU,eACb,kBAAC,EAAD,CAAYJ,OAAQgC,UCjCdY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCZNiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f486a24a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/res-comp_logo_white.33610903.png\";","import React from 'react'\n\nconst ResumeInput = (props) => {\n  const {resume, changeResume} = props\n  return (\n    <textarea value={resume} onChange={(e) => changeResume(e.target.value)} placeholder=\"Paste Your Resume\"/>\n  )\n}\n\nexport default ResumeInput","import React from 'react'\n\nconst JobInput = (props) => {\n  const {job, changeJob} = props\n  return (\n    <textarea value={job} onChange={(e) => changeJob(e.target.value)} placeholder=\"Paste Job Description\"/>\n  )\n}\n\nexport default JobInput","import React from 'react';\n\nconst SkillTable = (props) => {\n  const skills = props.skills\n  return (\n    <table width=\"100%\" border=\"0\" cellPadding=\"5\" cellSpacing=\"0\">\n      <thead className=\"header-row\">\n        <tr>\n          <td width=\"50%\" align=\"left\">Skill</td>\n          <td width=\"25%\" align=\"right\">Resume</td>\n          <td width=\"25%\" align=\"right\">Job</td>\n        </tr>\n      </thead>\n      <tbody>\n        {skills.sort((a, b) => {\n          if(b.job - a.job !== 0) return b.job - a.job\n          else return b.resume - a.resume\n          }).map(skill => <SkillRow key={skill.skill} skill={skill} />)\n        }\n      </tbody>\n    </table>\n  )\n}\n\nconst SkillRow = (props) => {\n  const skill = props.skill \n  return (\n    <tr>\n      <td width=\"50%\" align=\"left\">{skill.skill}</td>\n      <td width=\"25%\" align=\"right\">{skill.resume ? skill.resume : \"ðŸš«\"}</td>\n      <td width=\"25%\" align=\"right\">{skill.job}</td>\n    </tr>\n  )\n}\n\nexport default SkillTable","import skills from './skills.json'\n\n// escape possible special characters in a string\n// https://stackoverflow.com/questions/4371565/\nconst escapeRegExp = (s) => {\n  return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n}\n\nconst skill_count_in_text = (skill, text) => {\n  // https://stackoverflow.com/questions/63515086\n  // Creating a regexp to search for all instances of <skill>\n  // \\b means it is a standalone word (to prevent 'React' being in 'Reactive')\n  // 'g' means it will search globally (not just the first it finds)\n  // 'i' means it will be case insensitive\n  // Add word boundaries to make sure it is not a substring of a word\n  const rx = RegExp(\"\\\\b\" + escapeRegExp(skill) + \"\\\\b\", 'gi')\n  // We only want results that have the first letter capitalized\n  // (eg, 'Go' language not being picked up as 'go')\n  const matches = (text.match(rx) || [])\n  const properNouns = matches.filter(x => x.charAt(0) === skill.charAt(0))\n  return properNouns.length\n}\n\nconst skills_in_job = (job) => {\n  const job_skills = {}\n  skills.forEach(skill => {\n    const count = skill_count_in_text(skill, job)\n    if (count) job_skills[skill] = count\n  })\n  return job_skills\n}\n\nconst skills_in_resume = (resume, job_skills) => {\n  const resume_skills = {}\n  Object.keys(job_skills).forEach(skill => {\n    const count = skill_count_in_text(skill, resume)\n    resume_skills[skill] = count\n  })\n  return resume_skills\n}\n\nexport const compare = (resume, job) => {\n  const job_skills = skills_in_job(job)\n  const resume_skills = skills_in_resume(resume, job_skills)\n  const compare = []\n\n  Object.keys(job_skills).forEach(skill => {\n    compare.push({\n      'skill': skill,\n      'job': job_skills[skill],\n      'resume': resume_skills[skill],\n    })\n  })\n  return compare\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport ResumeInput from './components/resume-input'\nimport JobInput from './components/job-input'\nimport SkillTable from './components/skill-table'\nimport {compare} from './compare/compare'\nimport Logo from './images/res-comp_logo_white.png'\n\nfunction App() {\n  const [resume, changeResume] = useState(\"\")\n  const [job, changeJob] = useState(\"\")\n  const [skillSet, changeSkillSet] = useState([])\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const skillSet = compare(resume, job)\n    changeSkillSet(skillSet)\n  }\n\n  const handleKeyDown = (event) => {\n    if (event.keyCode === 13 && event.metaKey) {\n      const skillSet = compare(resume, job)\n      changeSkillSet(skillSet)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <img alt=\"logo\" id=\"logo\" src={Logo}/>\n      <div className=\"contents\">\n        <form onSubmit={handleSubmit} onKeyDown={handleKeyDown}>\n          <div className=\"top\">\n            <button id=\"submit\">Check Resume</button>\n            <div className=\"hidden-text-container\">\n              <span className={resume || job ? \"visible-text\" : \"hidden-text\"}>\n                Or submit with <em>&lt;CMD&gt;-&lt;Enter&gt;</em> or <em>&lt;Win&gt;-&lt;Enter&gt;</em>\n              </span>\n            </div>\n          </div>\n          <div className=\"main\">\n            <div className=\"input-container\">\n              <ResumeInput changeResume={changeResume} resume={resume}/>\n              <JobInput changeJob={changeJob} job={job}/>\n            </div>\n            <div className=\"skill-table\">\n              <SkillTable skills={skillSet} />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}